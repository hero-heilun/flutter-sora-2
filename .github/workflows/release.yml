# .github/workflows/release.yml

name: Build Flutter Release

# This workflow is triggered manually from the Actions tab on GitHub.
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release Version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

jobs:
  build_android:
    name: Build Android APK
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a GitHub Release
    env:
      # Create a job-level env var to check for the secret's existence.
      # This is a robust way to handle conditionals.
      HAS_KEYSTORE: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: "17"

      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: /usr/local/lib/android/sdk
          key: ${{ runner.os }}-android-sdk-${{ hashFiles('**/build.gradle.kts', '**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-android-sdk-

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.x' # Or specify your project's Flutter version
          cache: true # Enable caching for Flutter SDK and pub dependencies

      - name: Get Flutter dependencies
        run: flutter pub get

      # Note: You must create these secrets in your GitHub repository settings
      # Go to Settings > Secrets and variables > Actions > New repository secret
      # 1. ANDROID_KEYSTORE_BASE64: Your keystore file, base64 encoded.
      #    On macOS/Linux: base64 -i your_keystore.jks | pbcopy
      # 2. ANDROID_KEYSTORE_PASSWORD: The password for the keystore.
      # 3. ANDROID_KEY_ALIAS: The alias for your release key.
      # 4. ANDROID_KEY_PASSWORD: The password for the key alias.
      - name: Decode and install Android keystore
        # Use the env var for the condition. Note: it will be a string 'true' or 'false'.
        if: env.HAS_KEYSTORE == 'true'
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks

      - name: Build Android APK (Unsigned)
        if: env.HAS_KEYSTORE == 'false'
        run: |
          flutter build apk \
            --release \
            --build-name=${{ github.event.inputs.version }} \
            --build-number=${{ github.run_number }}

      - name: Build Android APK (Signed)
        if: env.HAS_KEYSTORE == 'true'
        # Assumes your gradle file is set up to read these environment variables for signing.
        run: |
          flutter build apk \
            --release \
            --build-name=${{ github.event.inputs.version }} \
            --build-number=${{ github.run_number }}
        env:
          KEYSTORE_PATH: ${{ github.workspace }}/android/app/upload-keystore.jks
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          STORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}

      - name: Create GitHub Release and Upload APK
        uses: softprops/action-gh-release@v1
        with:
          # The name of the tag to create. Using 'v' prefix is a common convention.
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          body: |
            Automated release for version ${{ github.event.inputs.version }}.
            Android APK attached.
          # The files to upload as release assets.
          files: build/app/outputs/flutter-apk/app-release.apk